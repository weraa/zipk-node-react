{"version":3,"sources":["../../test/udp_sender.js"],"names":["PORT","HOST","describe","server","tracer","thrift","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","dgram","createSocket","bind","reporter","InMemoryReporter","Tracer","ConstSampler","UDPSender","setProcess","_process","Thrift","entryPoint","path","join","__dirname","allowOptionalArguments","allowFilesystemAccess","afterEach","close","assertCallback","expectedNumSpans","expectedError","numSpans","error","it","startSpan","finish","ThriftUtils","spanToThrift","maxSpanBytes","_calcSpanSize","length","_maxSpanBytes","on","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","value","body","isOk","spans","process","serviceName","actualTags","_","sortBy","tags","o","key","done","append","undefined","flush","parentContext","context","childOfContext","childOfRef","opentracing","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","options","childOf","expectedTraceId","expectedParentId","traceId","parentId","each","span","ref","isNotOk","spanSize","_batch","_totalSpanBytes","spanThatExceedsCapacity","setTag","largeSpanSize","err","to","have","string","_logger","RemoteReporter","_host","expectLogs","semver","satisfies","version","info","console","log"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport dgram from 'dgram';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport { Thrift } from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\n\nconst PORT = 6832;\nconst HOST = '127.0.0.1';\n\ndescribe('udp sender', () => {\n  let server;\n  let tracer;\n  let thrift;\n  let sender;\n\n  function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n    assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n    assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n    assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n    assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n    assert.equal(spanOne.operationName, spanTwo.operationName);\n    assert.deepEqual(spanOne.references, spanTwo.references);\n    assert.equal(spanOne.flags, spanTwo.flags);\n    assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n    assert.deepEqual(spanOne.duration, spanTwo.duration);\n  }\n\n  beforeEach(() => {\n    server = dgram.createSocket('udp4');\n    server.bind(PORT, HOST);\n    let reporter = new InMemoryReporter();\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n    sender = new UDPSender();\n    sender.setProcess(reporter._process);\n    thrift = new Thrift({\n      entryPoint: path.join(__dirname, '../src/thriftrw-idl/agent.thrift'),\n      allowOptionalArguments: true,\n      allowFilesystemAccess: true,\n    });\n  });\n\n  afterEach(() => {\n    tracer.close();\n    server.close();\n  });\n\n  function assertCallback(expectedNumSpans, expectedError): SenderCallback {\n    return (numSpans, error) => {\n      assert.equal(numSpans, expectedNumSpans);\n      assert.equal(error, expectedError);\n    };\n  }\n\n  it('should read and verify spans and process sent', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanTwo = tracer.startSpan('operation-two');\n    spanTwo.finish(); // finish to set span duration\n    spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n    // make sure sender can fit both spans\n    let maxSpanBytes = sender._calcSpanSize(spanOne).length + sender._calcSpanSize(spanTwo).length + 30;\n    sender._maxSpanBytes = maxSpanBytes;\n\n    server.on('message', (msg, remote) => {\n      let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n      let batch = thriftObj.value.body.batch;\n      assert.isOk(batch);\n      assert.equal(batch.spans.length, 2);\n\n      assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n      assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n      assert.equal(batch.process.serviceName, 'test-service-name');\n      let actualTags = _.sortBy(batch.process.tags, o => {\n        return o.key;\n      });\n      assert.equal(actualTags.length, 4);\n      assert.equal(actualTags[0].key, 'client-uuid');\n      assert.equal(actualTags[1].key, 'ip');\n      assert.equal(actualTags[2].key, 'jaeger.hostname');\n      assert.equal(actualTags[3].key, 'jaeger.version');\n\n      sender.close();\n      done();\n    });\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanTwo, assertCallback(0, undefined));\n    sender.flush(assertCallback(2, undefined));\n  });\n\n  describe('span reference tests', () => {\n    let tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(true));\n    let parentContext = tracer.startSpan('just-used-for-context').context();\n    let childOfContext = tracer.startSpan('just-used-for-context').context();\n    let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n    let followsFromContext = tracer.startSpan('just-used-for-context').context();\n    let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n    let options = [\n      { childOf: null, references: [], expectedTraceId: null, expectedParentId: null },\n      {\n        childOf: parentContext,\n        references: [],\n        expectedTraceId: parentContext.traceId,\n        expectedParentId: parentContext.parentId,\n      },\n      {\n        childOf: parentContext,\n        references: [followsFromRef],\n        expectedTraceId: parentContext.traceId,\n        expectedParentId: parentContext.parentId,\n      },\n      {\n        childOf: parentContext,\n        references: [childOfRef, followsFromRef],\n        expectedTraceId: parentContext.traceId,\n        expectedParentId: parentContext.parentId,\n      },\n      {\n        childOf: null,\n        references: [childOfRef],\n        expectedTraceId: childOfContext.traceId,\n        expectedParentId: childOfContext.parentId,\n      },\n      {\n        childOf: null,\n        references: [followsFromRef],\n        expectedTraceId: followsFromContext.traceId,\n        expectedParentId: followsFromContext.parentId,\n      },\n      {\n        childOf: null,\n        references: [childOfRef, followsFromRef],\n        expectedTraceId: childOfContext.traceId,\n        expectedParentId: childOfContext.parentId,\n      },\n    ];\n\n    _.each(options, o => {\n      it('should serialize span references', done => {\n        let span = tracer.startSpan('bender', {\n          childOf: o.childOf,\n          references: o.references,\n        });\n        span.finish();\n        span = ThriftUtils.spanToThrift(span);\n\n        server.on('message', function(msg, remote) {\n          let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n          let batch = thriftObj.value.body.batch;\n          let span = batch.spans[0];\n          let ref = span.references[0];\n\n          assert.isOk(batch);\n          assertThriftSpanEqual(assert, span, batch.spans[0]);\n          if (o.expectedTraceId) {\n            assert.deepEqual(span.traceIdLow, o.expectedTraceId);\n          }\n\n          if (o.expectedParentId) {\n            assert.deepEqual(span.parentId, o.expectedParentId);\n          } else {\n            assert.isNotOk(span.parentId);\n          }\n\n          sender.close();\n          done();\n        });\n\n        sender.append(span);\n        sender.flush();\n      });\n    });\n  });\n\n  it('should flush spans when capacity is reached', () => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanSize = sender._calcSpanSize(spanOne).length;\n    sender._maxSpanBytes = spanSize * 2;\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanOne, assertCallback(2, undefined));\n\n    assert.equal(sender._batch.spans.length, 0);\n    assert.equal(sender._totalSpanBytes, 0);\n  });\n\n  it('should flush spans when just over capacity', done => {\n    let spanOne = tracer.startSpan('operation-one');\n    spanOne.finish(); // finish to set span duration\n    spanOne = ThriftUtils.spanToThrift(spanOne);\n    let spanSize = sender._calcSpanSize(spanOne).length;\n    sender._maxSpanBytes = spanSize * 2;\n\n    let spanThatExceedsCapacity = tracer.startSpan('bigger-span');\n    spanThatExceedsCapacity.setTag('some-key', 'some-value');\n    spanThatExceedsCapacity.finish(); // finish to set span duration\n    spanThatExceedsCapacity = ThriftUtils.spanToThrift(spanThatExceedsCapacity);\n    let largeSpanSize = sender._calcSpanSize(spanThatExceedsCapacity).length;\n\n    sender.append(spanOne, assertCallback(0, undefined));\n    sender.append(spanThatExceedsCapacity, (numSpans, error) => {\n      assert.equal(numSpans, 1);\n      assert.equal(error, undefined);\n\n      assert.equal(sender._batch.spans.length, 1);\n      assert.equal(sender._totalSpanBytes, largeSpanSize);\n      done();\n    });\n  });\n\n  it('should returns error from flush() on failed buffer conversion', done => {\n    let span = tracer.startSpan('leela');\n    span.finish(); // finish to set span duration\n    span = ThriftUtils.spanToThrift(span);\n    span.flags = 'string'; // malform the span to create a serialization error\n    sender.append(span);\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error writing Thrift object:');\n      done();\n    });\n  });\n\n  it('should return error upon thrift conversion failure', done => {\n    sender._logger = {\n      error: msg => {\n        expect(msg).to.have.string('error converting span to Thrift:');\n        done();\n      },\n    };\n    let span = tracer.startSpan(undefined);\n    span.finish();\n\n    sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error converting span to Thrift:');\n      done();\n    });\n  });\n\n  it('should return error on span too large', done => {\n    let span = tracer.startSpan('op-name');\n    span.finish(); // otherwise duration will be undefined\n\n    sender._maxSpanBytes = 1;\n    sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('is larger than maxSpanSize');\n      done();\n    });\n  });\n\n  it('should return 0,undefined on flush() with no spans', () => {\n    sender.flush(assertCallback(0, undefined));\n  });\n\n  it('should gracefully handle errors emitted by socket.send', done => {\n    let tracer = new Tracer('test-service-name', new RemoteReporter(sender), new ConstSampler(true));\n    sender._host = 'foo.bar.xyz';\n    // In Node 0.10 and 0.12 the error is logged twice: (1) from inline callback, (2) from on('error') handler.\n    let expectLogs = semver.satisfies(process.version, '0.10.x || 0.12.x');\n    sender._logger = {\n      info: msg => {\n        console.log('sender info: ' + msg);\n      },\n      error: msg => {\n        assert.isOk(expectLogs);\n        expect(msg).to.have.string('error sending spans over UDP: Error: getaddrinfo ENOTFOUND');\n        tracer.close(done);\n      },\n    };\n    tracer.startSpan('testSpan').finish();\n    sender.flush((numSpans, err) => {\n      assert.equal(numSpans, 1);\n      expect(err).to.have.string('error sending spans over UDP: Error: getaddrinfo ENOTFOUND');\n      if (!expectLogs) {\n        tracer.close(done);\n      }\n    });\n  });\n});\n"]}