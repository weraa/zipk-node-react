{"version":3,"sources":["../../test/text_map_codec.js"],"names":["constants","describe","it","metrics","Metrics","LocalMetricFactory","tracer","Tracer","InMemoryReporter","ConstSampler","headers","context","extract","opentracing","FORMAT_HTTP_HEADERS","assert","isOk","LocalBackend","counterEquals","decodingErrors","JAEGER_DEBUG_HEADER","encodeURIComponent","isDebugIDContainerOnly","equal","debugId","span","startSpan","childOf","isNotOk","parentId","traceId","isSampled","isDebug","tagFound","i","_tags","length","tag","key","value","tracesStartedSampled","debugThrottler","DefaultThrottler","prevTagLength"],"mappings":"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","file":"text_map_codec.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport * as constants from '../src/constants.js';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('Text Map Codec should', () => {\n  it('report metric when failing to decode tracer state', () => {\n    let metrics = new Metrics(new LocalMetricFactory());\n    let tracer = new Tracer('test-tracer', new InMemoryReporter(), new ConstSampler(false), {\n      metrics: metrics,\n    });\n\n    let headers = {\n      'uber-trace-id': 'bad-value',\n    };\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n\n    assert.isOk(context);\n    assert.isOk(LocalBackend.counterEquals(metrics.decodingErrors, 1));\n  });\n\n  it('set debug flag when debug-id-header is received', () => {\n    let metrics = new Metrics(new LocalMetricFactory());\n    let tracer = new Tracer('test-tracer', new InMemoryReporter(), new ConstSampler(false), {\n      metrics: metrics,\n    });\n    let headers = {};\n    headers[constants.JAEGER_DEBUG_HEADER] = encodeURIComponent('value1');\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.isOk(context.isDebugIDContainerOnly());\n    assert.equal(context.debugId, 'value1');\n\n    let span = tracer.startSpan('root', { childOf: context });\n\n    assert.isNotOk(span.context().parentId);\n    assert.isOk(span.context().traceId !== 0);\n    assert.isOk(span.context().isSampled());\n    assert.isOk(span.context().isDebug());\n\n    let tagFound = false;\n    for (let i = 0; i < span._tags.length; i++) {\n      let tag = span._tags[i];\n      if (tag.key === constants.JAEGER_DEBUG_HEADER && span._tags[i].value === 'value1') {\n        tagFound = true;\n      }\n    }\n\n    assert.isOk(tagFound);\n\n    // metrics\n    assert.isOk(LocalBackend.counterEquals(metrics.tracesStartedSampled, 1));\n  });\n\n  it('not set debug flag when debug-id-header is received but operation is throttled', () => {\n    let tracer = new Tracer('test-tracer', new InMemoryReporter(), new ConstSampler(false), {\n      debugThrottler: new DefaultThrottler(true),\n    });\n    let headers = {};\n    headers[constants.JAEGER_DEBUG_HEADER] = encodeURIComponent('value1');\n\n    let context = tracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.isOk(context.isDebugIDContainerOnly());\n\n    let span = tracer.startSpan('root', { childOf: context });\n    let prevTagLength = span._tags.length;\n    assert.isNotOk(span.context().isDebug());\n    assert.equal(\n      prevTagLength,\n      span._tags.length,\n      'The sampling.priority tag should not be set if throttled'\n    );\n  });\n});\n"]}