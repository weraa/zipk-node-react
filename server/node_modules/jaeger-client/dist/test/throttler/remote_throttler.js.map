{"version":3,"sources":["../../../test/throttler/remote_throttler.js"],"names":["describe","server","logger","metrics","throttler","serviceName","operation","other_operation","uuid","creditsUpdatedHook","before","ConfigServer","start","after","close","beforeEach","clearConfigs","MockLogger","Metrics","LocalMetricFactory","sinon","spy","RemoteThrottler","refreshIntervalMs","initialDelayMs","onCreditsUpdate","afterEach","it","setProcess","addCredits","balance","assert","isOk","_throttler","isAllowed","equal","_credits","LocalBackend","counterValue","throttlerUpdateSuccess","throttledDebugSpans","done","isNotOk","_refreshCredits","_fetchCredits","_errorMsgs","length","notCalled","_isAllowed","throttlerUpdateFailure","increment","_host","_afterInitialDelay"],"mappings":"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","file":"remote_throttler.js","sourcesContent":["// Copyright (c) 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { assert } from 'chai';\nimport Metrics from '../../src/metrics/metrics.js';\nimport MockLogger from '../lib/mock_logger';\nimport ConfigServer from '../lib/config_server';\nimport LocalMetricFactory from '../lib/metrics/local/metric_factory.js';\nimport LocalBackend from '../lib/metrics/local/backend.js';\nimport RemoteThrottler from '../../src/throttler/remote_throttler';\nimport sinon from 'sinon';\n\ndescribe('RemoteThrottler should', () => {\n  let server: ConfigServer;\n  let logger: MockLogger;\n  let metrics: Metrics;\n  let throttler: RemoteThrottler;\n  let serviceName = 'service';\n  let operation = 'op';\n  let other_operation = 'oop';\n  let uuid = 'uuid';\n  let creditsUpdatedHook;\n\n  before(() => {\n    server = new ConfigServer().start();\n  });\n\n  after(() => {\n    server.close();\n  });\n\n  beforeEach(() => {\n    server.clearConfigs();\n    logger = new MockLogger();\n    metrics = new Metrics(new LocalMetricFactory());\n    creditsUpdatedHook = sinon.spy();\n    throttler = new RemoteThrottler(serviceName, {\n      refreshIntervalMs: 0,\n      initialDelayMs: 60000,\n      metrics: metrics,\n      logger: logger,\n      onCreditsUpdate: (...args) => creditsUpdatedHook(...args),\n    });\n  });\n\n  afterEach(() => {\n    throttler.close();\n  });\n\n  it('return false for isAllowed on initial call and return true once credits are initialized', done => {\n    throttler.setProcess({ uuid: uuid });\n    server.addCredits(serviceName, [{ operation: operation, balance: 3 }]);\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 2);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 1);\n      done();\n    };\n    assert.isNotOk(throttler.isAllowed(operation));\n    throttler._refreshCredits();\n  });\n\n  it('log an error if _refreshCredits is called prior to UUID being set', () => {\n    throttler._fetchCredits = sinon.spy();\n    throttler._refreshCredits();\n    assert.equal(logger._errorMsgs.length, 1);\n    sinon.assert.notCalled(throttler._fetchCredits);\n  });\n\n  it('not fetch credits if uuid is invalid', () => {\n    throttler._fetchCredits = sinon.spy();\n    throttler.setProcess({ uuid: null });\n    throttler._refreshCredits();\n    assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n    sinon.assert.notCalled(throttler._fetchCredits);\n  });\n\n  it(\"return false for _isAllowed if operation isn't in _credits or operation has no credits\", () => {\n    assert.isNotOk(\n      throttler._isAllowed(operation),\n      'operation is not set so operation should not be allowed'\n    );\n    throttler._credits[operation] = 0;\n    assert.isNotOk(throttler._isAllowed(operation), 'operation is set but lacks credit');\n    assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 2);\n  });\n\n  it(\"return false for isAllowed if operation doesn't have enough credits\", () => {\n    throttler._credits[operation] = 0.5;\n    assert.isNotOk(throttler._isAllowed(operation));\n    assert.equal(LocalBackend.counterValue(metrics.throttledDebugSpans), 1);\n  });\n\n  it('succeed when we retrieve credits for multiple operations', done => {\n    throttler.setProcess({ uuid: uuid });\n    server.addCredits(serviceName, [\n      { operation: operation, balance: 5 },\n      { operation: other_operation, balance: 3 },\n    ]);\n    throttler._credits[operation] = 0;\n    throttler._credits[other_operation] = 0;\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 4);\n      assert.isOk(_throttler.isAllowed(other_operation));\n      assert.equal(_throttler._credits[other_operation], 2);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      done();\n    };\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric on failing to query for credits', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    throttler._host = 'Llanfair­pwllgwyngyll­gogery­chwyrn­drobwll­llan­tysilio­gogo­goch';\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric on failing to parse bad http json response', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    server.addCredits(serviceName, 'not-json');\n    throttler._refreshCredits();\n  });\n\n  it('emit failure metric when server returns an invalid response', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    metrics.throttlerUpdateFailure.increment = function() {\n      assert.equal(logger._errorMsgs.length, 1, `errors=${logger._errorMsgs}`);\n      done();\n    };\n    throttler._refreshCredits();\n  });\n\n  it('not fetch credits if no operations have been seen', () => {\n    throttler = new RemoteThrottler(serviceName);\n    throttler._fetchCredits = sinon.spy();\n    throttler.setProcess({ uuid: uuid });\n    throttler._refreshCredits();\n    sinon.assert.notCalled(throttler._fetchCredits);\n    throttler.close();\n  });\n\n  it('refresh credits after _afterInitialDelay is called', done => {\n    throttler.setProcess({ uuid: uuid });\n    throttler._credits[operation] = 0;\n    server.addCredits(serviceName, [{ operation: operation, balance: 5 }]);\n    creditsUpdatedHook = _throttler => {\n      assert.isOk(_throttler.isAllowed(operation));\n      assert.equal(_throttler._credits[operation], 4);\n      assert.equal(LocalBackend.counterValue(metrics.throttlerUpdateSuccess), 1);\n      done();\n    };\n    throttler._afterInitialDelay();\n  });\n});\n"]}