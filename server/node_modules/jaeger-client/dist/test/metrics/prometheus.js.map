{"version":3,"sources":["../../../test/metrics/prometheus.js"],"names":["importPromClient","require","error","console","log","describe","metrics","PromClient","before","skip","it","PrometheusMetricsFactory","name","createGauge","update","singleMetric","register","getSingleMetric","get","assert","equal","type","values","value","clear","fakePromClient","to","throw","namespace","beforeEach","e","stack","afterEach","createCounter","increment","tags1","result","counter1","tags2","counter2","getMetricsAsJSON","length","deepEqual","labels"],"mappings":"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","file":"prometheus.js","sourcesContent":["// Copyright (c) 2018 Jaeger Author.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert, expect } from 'chai';\nimport { PrometheusMetricsFactory } from '../../src/index.js';\n\nfunction importPromClient() {\n  try {\n    return require('prom-client');\n  } catch (error) {\n    console.log(\"cannot import 'prom-client', skipping tests\");\n    return null;\n  }\n}\n\ndescribe('Prometheus metrics', () => {\n  let metrics;\n  let PromClient;\n\n  before(function() {\n    PromClient = importPromClient();\n    if (!PromClient) {\n      this.skip();\n    }\n  });\n\n  it('should initialize without namespace', () => {\n    metrics = new PrometheusMetricsFactory(PromClient);\n    let name = 'jaeger:gauge';\n\n    metrics.createGauge(name).update(1);\n\n    let singleMetric = PromClient.register.getSingleMetric(name).get();\n    assert.equal(singleMetric.type, 'gauge');\n    assert.equal(singleMetric.name, name);\n    assert.equal(singleMetric.values[0].value, 1);\n    PromClient.register.clear();\n  });\n\n  it('should throw exception when initialized without prom-client object', () => {\n    expect(() => {\n      let fakePromClient = {};\n      metrics = new PrometheusMetricsFactory(fakePromClient);\n    }).to.throw('prom-client must be provided');\n  });\n});\n\ndescribe('Prometheus metrics with namespace', () => {\n  let metrics;\n  let PromClient;\n  let namespace = 'test';\n\n  before(function() {\n    PromClient = importPromClient();\n    if (!PromClient) {\n      this.skip();\n    }\n  });\n\n  beforeEach(() => {\n    try {\n      metrics = new PrometheusMetricsFactory(PromClient, namespace);\n    } catch (e) {\n      console.log('beforeEach failed', e);\n      console.log(e.stack);\n    }\n  });\n\n  afterEach(() => {\n    PromClient.register.clear();\n  });\n\n  it('should increment a counter with a provided value', () => {\n    let name = 'jaeger:counter';\n\n    metrics.createCounter(name).increment(1);\n\n    name = namespace + '_' + name;\n    let singleMetric = PromClient.register.getSingleMetric(name).get();\n    assert.equal(singleMetric.type, 'counter');\n    assert.equal(singleMetric.name, name);\n    assert.equal(singleMetric.values[0].value, 1);\n  });\n\n  it('should increment a tagged counter with a provided value', () => {\n    let name = 'jaeger:counter';\n\n    let tags1 = { result: 'ok' };\n    let counter1 = metrics.createCounter(name, tags1);\n    counter1.increment(1);\n    counter1.increment(1);\n\n    let tags2 = { result: 'err' };\n    let counter2 = metrics.createCounter(name, tags2);\n    counter2.increment(); // increment by 1\n\n    assert.equal(PromClient.register.getMetricsAsJSON().length, 1);\n    name = namespace + '_' + name;\n    let singleMetric = PromClient.register.getSingleMetric(name).get();\n    assert.equal(singleMetric.values.length, 2);\n    assert.deepEqual(singleMetric.values[0].labels, tags1);\n    assert.equal(singleMetric.values[0].value, 2);\n    assert.deepEqual(singleMetric.values[1].labels, tags2);\n    assert.equal(singleMetric.values[1].value, 1);\n  });\n\n  it('should update counter and gauge', () => {\n    metrics.createCounter('jaeger:counter', { result: 'ok' }).increment(1);\n    metrics.createCounter('jaeger:counter', { result: 'err' }).increment(1);\n    metrics.createGauge('jaeger:gauge', { result: 'ok' }).update(1);\n    metrics.createGauge('jaeger:gauge', { result: 'err' }).update(1);\n    assert.equal(PromClient.register.getMetricsAsJSON().length, 2);\n  });\n});\n"]}