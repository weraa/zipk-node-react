{"version":3,"sources":["../../test/tracer.js"],"names":["constants","opentracing","describe","tracer","reporter","InMemoryReporter","beforeEach","Tracer","ConstSampler","afterEach","clear","close","it","ck","mytracer","contextKey","headers","mycontext","extract","FORMAT_HTTP_HEADERS","assert","equal","toString","myspan","startSpan","childOf","context","traceIdStr","exheaders","inject","notEqual","TRACER_BAGGAGE_HEADER_PREFIX","JAEGER_BAGGAGE_HEADER","spanContext","FORMAT_TEXT_MAP","rootSpan","isOk","traceId","isNotOk","parentId","flags","getBaggageItem","Utils","encodeInt64","spanId","SpanContext","withBinaryIds","start","rpcServer","internalTags","references","tags","keyOne","keyTwo","span","_startInternalSpan","deepEqual","_startTime","Object","keys","_tags","length","_report","spans","actualTags","_","sortBy","o","key","value","startTime","Date","getTime","isSampled","childOfParams","operationName","referenceParams","Reference","REFERENCE_CHILD_OF","assertByStartSpanParameters","params","SAMPLED_MASK","baggage","savedContext","assertByFormat","carrier","format","extractedContext","to","throw","throttler","DefaultThrottler","setProcess","sinon","spy","debugThrottler","_process","serviceName","isString","uuid","calledWith","calledOnce","sampled","metrics","each","Metrics","LocalMetricFactory","fromString","Tags","SPAN_KIND","SPAN_KIND_RPC_SERVER","LocalBackend","counterEquals","metricName","spansFinished"],"mappings":"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","file":"tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport * as constants from '../src/constants.js';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport * as opentracing from 'opentracing';\nimport SpanContext from '../src/span_context.js';\nimport Tracer from '../src/tracer.js';\nimport Utils from '../src/util.js';\nimport Metrics from '../src/metrics/metrics.js';\nimport LocalMetricFactory from './lib/metrics/local/metric_factory.js';\nimport LocalBackend from './lib/metrics/local/backend.js';\nimport sinon from 'sinon';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\ndescribe('tracer should', () => {\n  let tracer;\n  let reporter = new InMemoryReporter();\n\n  beforeEach(() => {\n    tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n  });\n\n  afterEach(() => {\n    reporter.clear();\n    tracer.close();\n  });\n\n  it('be able to override codec contextKey and extract context', () => {\n    let ck = 'test-trace-id';\n    let mytracer = new Tracer('test-service-name', reporter, new ConstSampler(true), {\n      contextKey: ck,\n    });\n\n    let headers = {\n      'test-trace-id': 'a:b:c:d',\n    };\n\n    let mycontext = mytracer.extract(opentracing.FORMAT_HTTP_HEADERS, headers);\n    assert.equal(mycontext.toString(), headers[ck]);\n\n    let myspan = mytracer.startSpan('myspan', { childOf: mycontext });\n    assert.equal(myspan.context().traceIdStr, 'a');\n\n    let exheaders = {};\n\n    mytracer.inject(myspan.context(), opentracing.FORMAT_HTTP_HEADERS, exheaders);\n    assert.notEqual(exheaders[ck], null);\n  });\n\n  it('begin a new span given only baggage headers', () => {\n    // Users sometimes want to pass baggage even if there is no span.\n    // In this case we must ensure a new root span is created.\n    let headers = {};\n    // combine normal baggage encoding\n    headers[constants.TRACER_BAGGAGE_HEADER_PREFIX + 'robot'] = 'Bender';\n    // with custom encoding via `jaeger-baggage` header\n    headers[constants.JAEGER_BAGGAGE_HEADER] = 'male=Fry, female=Leela, Lord Nibbler';\n    let spanContext = tracer.extract(opentracing.FORMAT_TEXT_MAP, headers);\n    let rootSpan = tracer.startSpan('fry', { childOf: spanContext });\n\n    assert.isOk(rootSpan.context().traceId);\n    assert.isNotOk(rootSpan.context().parentId);\n    assert.equal(rootSpan.context().flags, 1);\n    assert.equal('Bender', rootSpan.getBaggageItem('robot'));\n    assert.equal('Leela', rootSpan.getBaggageItem('female'));\n    assert.equal('Fry', rootSpan.getBaggageItem('male'));\n  });\n\n  it('create a span correctly through _startInternalSpan', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let start = 123.456;\n    let rpcServer = false;\n    let internalTags = [];\n    let references = [];\n    let tags = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let span = tracer._startInternalSpan(\n      context,\n      'op-name',\n      start,\n      internalTags,\n      tags,\n      null,\n      rpcServer,\n      references\n    );\n\n    assert.deepEqual(span.context().traceId, traceId);\n    assert.deepEqual(span.context().spanId, spanId);\n    assert.deepEqual(span.context().parentId, parentId);\n    assert.equal(span.context().flags, flags);\n    assert.equal(span._startTime, start);\n    assert.equal(Object.keys(span._tags).length, 2);\n  });\n\n  it('report a span with no tracer level tags', () => {\n    let span = tracer.startSpan('op-name');\n    tracer._report(span);\n    assert.isOk(reporter.spans.length, 1);\n    let actualTags = _.sortBy(span._tags, o => {\n      return o.key;\n    });\n\n    assert.equal(2, actualTags.length);\n    assert.equal(actualTags[0].key, 'sampler.param');\n    assert.equal(actualTags[1].key, 'sampler.type');\n    assert.equal(actualTags[0].value, true);\n    assert.equal(actualTags[1].value, 'const');\n  });\n\n  it('start a root span with proper structure', () => {\n    let startTime = new Date(2016, 8, 18).getTime();\n    let span = tracer.startSpan('test-name', {\n      startTime: startTime,\n    });\n\n    assert.equal(span.context().traceId, span.context().spanId);\n    assert.isNotOk(span.context().parentId);\n    assert.isOk(span.context().isSampled());\n    assert.equal(span._startTime, startTime);\n  });\n\n  it('start a child span represented as a separate span from parent, using childOf and references', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n    let startTime = 123.456;\n\n    let childOfParams = {\n      operationName: 'test-name',\n      childOf: context,\n      startTime: startTime,\n    };\n\n    let referenceParams = {\n      operationName: 'test-name',\n      startTime: startTime,\n      references: [new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, context)],\n    };\n\n    let assertByStartSpanParameters = params => {\n      let span = tracer.startSpan('test-span', params);\n      assert.deepEqual(span.context().traceId, traceId);\n      assert.deepEqual(span.context().parentId, spanId);\n      assert.equal(span.context().flags, constants.SAMPLED_MASK);\n      assert.equal(span._startTime, startTime);\n    };\n\n    assertByStartSpanParameters(childOfParams);\n    assertByStartSpanParameters(referenceParams);\n  });\n\n  it('inject plain text headers into carrier, and extract span context with the same value', () => {\n    let keyOne = 'keyOne';\n    let keyTwo = 'keyTwo';\n    let baggage = {\n      keyOne: 'leela',\n      keyTwo: 'bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n\n    let assertByFormat = format => {\n      let carrier = {};\n      tracer.inject(savedContext, format, carrier);\n      let extractedContext = tracer.extract(format, carrier);\n\n      assert.deepEqual(savedContext.traceId, extractedContext.traceId);\n      assert.deepEqual(savedContext.spanId, extractedContext.spanId);\n      assert.deepEqual(savedContext.parentId, extractedContext.parentId);\n      assert.equal(savedContext.flags, extractedContext.flags);\n      assert.equal(savedContext.baggage[keyOne], extractedContext.baggage[keyOne]);\n      assert.equal(savedContext.baggage[keyTwo], extractedContext.baggage[keyTwo]);\n    };\n\n    assertByFormat(opentracing.FORMAT_TEXT_MAP);\n    assertByFormat(opentracing.FORMAT_HTTP_HEADERS);\n  });\n\n  it('inject url encoded values into headers', () => {\n    let baggage = {\n      keyOne: 'Leela vs. Bender',\n    };\n    let savedContext = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK,\n      baggage\n    );\n    let carrier = {};\n\n    tracer.inject(savedContext, opentracing.FORMAT_HTTP_HEADERS, carrier);\n    assert.equal(carrier['uberctx-keyOne'], 'Leela%20vs.%20Bender');\n  });\n\n  it('assert inject and extract throw errors when given an invalid format', () => {\n    let carrier = {};\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      constants.SAMPLED_MASK\n    );\n\n    // subtle but expect wants a function to call not the result of a function call.\n    expect(() => {\n      tracer.inject(context, 'fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n    expect(() => {\n      tracer.extract('fake-format', carrier);\n    }).to.throw('Unsupported format: fake-format');\n  });\n\n  it('report spans', () => {\n    let span = tracer.startSpan('operation');\n    tracer._report(span);\n\n    assert.equal(reporter.spans.length, 1);\n  });\n\n  it('set _process on initialization', () => {\n    const throttler = new DefaultThrottler();\n    throttler.setProcess = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    assert.equal(tracer._process.serviceName, 'x');\n    assert.isString(tracer._process.uuid);\n    sinon.assert.calledWith(throttler.setProcess, tracer._process);\n  });\n\n  it('close _debugThrottler on close', () => {\n    const throttler = new DefaultThrottler();\n    throttler.close = sinon.spy();\n    tracer = new Tracer('x', reporter, new ConstSampler(true), {\n      debugThrottler: throttler,\n    });\n    tracer.close();\n    sinon.assert.calledOnce(throttler.close);\n  });\n\n  describe('Metrics', () => {\n    it('startSpan', () => {\n      let params = [\n        {\n          rpcServer: false,\n          context: null,\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesStartedSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:1',\n          sampled: true,\n          metrics: ['spansStartedSampled', 'tracesJoinedSampled'],\n        },\n        {\n          rpcServer: false,\n          context: null,\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesStartedNotSampled'],\n        },\n        {\n          rpcServer: true,\n          context: '1:2:100:0',\n          sampled: false,\n          metrics: ['spansStartedNotSampled', 'tracesJoinedNotSampled'],\n        },\n      ];\n\n      _.each(params, o => {\n        let metrics = new Metrics(new LocalMetricFactory());\n        tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(o.sampled), {\n          metrics: metrics,\n        });\n\n        let context = null;\n        if (o.context) {\n          context = SpanContext.fromString(o.context);\n        }\n\n        let tags = {};\n        if (o.rpcServer) {\n          tags[opentracing.Tags.SPAN_KIND] = opentracing.Tags.SPAN_KIND_RPC_SERVER;\n        }\n\n        tracer.startSpan('bender', {\n          childOf: context,\n          tags: tags,\n        });\n\n        _.each(o.metrics, metricName => {\n          assert.isOk(LocalBackend.counterEquals(metrics[metricName], 1));\n        });\n      });\n    });\n\n    it('emits counter when report called', () => {\n      let metrics = new Metrics(new LocalMetricFactory());\n      tracer = new Tracer('fry', new InMemoryReporter(), new ConstSampler(true), {\n        metrics: metrics,\n      });\n      let span = tracer.startSpan('bender');\n      tracer._report(span);\n\n      assert.isOk(LocalBackend.counterEquals(metrics.spansFinished, 1));\n    });\n  });\n});\n"]}