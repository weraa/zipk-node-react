{"version":3,"sources":["../../../test/samplers/per_operation_sampler.js"],"names":["describe","strategies","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","operation","probabilisticSampling","samplingRate","it","sampler","PerOperationSampler","assert","equal","name","callback","sinon","spy","close","calledOnce","_maxOperations","_defaultLowerBound","isObject","_defaultSampler","Object","keys","_samplersByOperation","length","s1","_probabilisticSampler","exp","mock","expects","exactly","withExactArgs","isSampled","verify","updated","isUpdated","update","isTrue","s2","s0","isFalse","strictEqual"],"mappings":"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","file":"per_operation_sampler.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport sinon from 'sinon';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler';\n\ndescribe('PerOperationSampler', () => {\n  let strategies: PerOperationSamplingStrategies = {\n    defaultLowerBoundTracesPerSecond: 1.1,\n    defaultSamplingProbability: 0.123,\n    perOperationStrategies: [\n      {\n        operation: 'op1',\n        probabilisticSampling: { samplingRate: 0.5 },\n      },\n    ],\n  };\n\n  it('should have a name and be closable', () => {\n    let sampler = new PerOperationSampler(strategies, 0);\n    assert.equal(sampler.name(), 'PerOperationSampler');\n\n    let callback = sinon.spy();\n    sampler.close(callback);\n    assert(callback.calledOnce);\n\n    sampler = new PerOperationSampler(strategies, 0);\n    sampler.close(); // close without callback\n\n    sampler.equal(sampler); // for coverate only\n  });\n\n  it('should parse initial strategies', () => {\n    let sampler = new PerOperationSampler(strategies, 2);\n    assert.equal(sampler._maxOperations, 2);\n    assert.equal(sampler._defaultLowerBound, 1.1);\n    assert.isObject(sampler._defaultSampler);\n    assert.equal(sampler._defaultSampler.samplingRate, 0.123);\n    assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n    let s1 = sampler._samplersByOperation['op1'];\n    assert.isObject(s1);\n    assert.isObject(s1._probabilisticSampler);\n    assert.equal(s1._probabilisticSampler.samplingRate, 0.5);\n  });\n\n  it('should use per-op sampler', () => {\n    let sampler = new PerOperationSampler(strategies, 2);\n    let s1 = sampler._samplersByOperation['op1'];\n    let exp = sinon.mock(s1).expects('isSampled');\n    exp.exactly(2);\n    exp.withExactArgs('op1', {});\n    sampler.isSampled('op1', {});\n    sampler.isSampled('op1', {});\n    exp.verify();\n    assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n  });\n\n  it('should add per-op samplers up to maxOperations', () => {\n    let sampler = new PerOperationSampler(strategies, 2);\n    sampler.isSampled('op2', {});\n    assert.equal(Object.keys(sampler._samplersByOperation).length, 2);\n  });\n\n  it('should fallback to probabilistic sampler after maxOperations', () => {\n    let sampler = new PerOperationSampler(strategies, 1); // maxOperation = 1\n    let s1 = sampler._defaultSampler;\n    let exp = sinon.mock(s1).expects('isSampled');\n    exp.exactly(2);\n    sampler.isSampled('op2', {});\n    sampler.isSampled('op3', {});\n    assert.equal(Object.keys(sampler._samplersByOperation).length, 1);\n    exp.verify();\n  });\n\n  it('should update samplers', () => {\n    let sampler = new PerOperationSampler(strategies, 2);\n    let updated: PerOperationSamplingStrategies = {\n      defaultLowerBoundTracesPerSecond: 2,\n      defaultSamplingProbability: 0.333,\n      perOperationStrategies: [\n        {\n          operation: 'op1',\n          probabilisticSampling: { samplingRate: 0.01 },\n        },\n        {\n          operation: 'op2',\n          probabilisticSampling: { samplingRate: 0.001 },\n        },\n      ],\n    };\n    let isUpdated: boolean = sampler.update(updated);\n    assert.isTrue(isUpdated);\n    assert.equal(sampler._defaultLowerBound, 2);\n    assert.isObject(sampler._defaultSampler);\n    assert.equal(sampler._defaultSampler.samplingRate, 0.333);\n    assert.equal(Object.keys(sampler._samplersByOperation).length, 2);\n    let s1 = sampler._samplersByOperation['op1'];\n    assert.isObject(s1);\n    assert.isObject(s1._probabilisticSampler);\n    assert.equal(s1._probabilisticSampler.samplingRate, 0.01);\n    let s2 = sampler._samplersByOperation['op2'];\n    assert.isObject(s2);\n    assert.isObject(s2._probabilisticSampler);\n    assert.equal(s2._probabilisticSampler.samplingRate, 0.001);\n  });\n\n  it('should not update samplers if strategies did not change', () => {\n    let strategies: PerOperationSamplingStrategies = {\n      defaultLowerBoundTracesPerSecond: 2,\n      defaultSamplingProbability: 0.333,\n      perOperationStrategies: [\n        {\n          operation: 'op1',\n          probabilisticSampling: { samplingRate: 0.01 },\n        },\n        {\n          operation: 'op2',\n          probabilisticSampling: { samplingRate: 0.001 },\n        },\n      ],\n    };\n    let sampler = new PerOperationSampler(strategies, 2);\n    let s0 = sampler._defaultSampler;\n    let s1 = sampler._samplersByOperation['op1'];\n    let s2 = sampler._samplersByOperation['op2'];\n\n    let isUpdated: boolean = sampler.update(strategies);\n    assert.isFalse(isUpdated);\n    assert.strictEqual(sampler._defaultSampler, s0);\n    assert.strictEqual(sampler._samplersByOperation['op1'], s1);\n    assert.strictEqual(sampler._samplersByOperation['op2'], s2);\n  });\n});\n"]}