{"version":3,"sources":["../../test/init_tracer.js"],"names":["logger","info","msg","metrics","createCounter","increment","createGauge","createTimer","describe","it","config","serviceName","disable","tracer","to","be","an","instanceof","opentracing","Tracer","configs","_","each","throw","_sampler","RemoteSampler","_reporter","RemoteReporter","close","done","options","type","param","expectedType","ConstSampler","expectedParam","RateLimitingSampler","ProbabilisticSampler","samplerConfig","sampler","count","err","assert","equal","reporter","logSpans","agentHost","agentPort","flushIntervalMs","CompositeReporter","remoteReporter","i","_reporters","length","_bufferFlushInterval","_sender","_host","_port","tags","x","_logger","_metrics","_factory","_tags","throttler","refreshIntervalMs","_debugThrottler","RemoteThrottler","DefaultThrottler"],"mappings":"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","file":"init_tracer.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport CompositeReporter from '../src/reporters/composite_reporter';\nimport RemoteReporter from '../src/reporters/remote_reporter';\nimport ConstSampler from '../src/samplers/const_sampler';\nimport ProbabilisticSampler from '../src/samplers/probabilistic_sampler';\nimport RemoteSampler from '../src/samplers/remote_sampler';\nimport RateLimitingSampler from '../src/samplers/ratelimiting_sampler';\nimport { initTracer } from '../src/index.js';\nimport opentracing from 'opentracing';\nimport RemoteThrottler from '../src/throttler/remote_throttler';\nimport DefaultThrottler from '../src/throttler/default_throttler';\n\nconst logger = {\n  info: function info(msg) {},\n};\n\nconst metrics = {\n  createCounter: function createCounter() {\n    return {\n      increment: function() {},\n    };\n  },\n  createGauge: function createGauge() {\n    return {};\n  },\n  createTimer: function createTimer() {\n    return {};\n  },\n};\n\ndescribe('initTracer', () => {\n  it('should initialize noop tracer when disable is set', () => {\n    let config = {\n      serviceName: 'test-service',\n      disable: true,\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer).to.be.an.instanceof(opentracing.Tracer);\n  });\n\n  it('should throw error on invalid serviceName', () => {\n    let configs = [{ serviceName: '' }, { serviceName: null }, {}];\n\n    _.each(configs, config => {\n      expect(() => {\n        initTracer(config);\n      }).to.throw('config.serviceName must be provided');\n    });\n  });\n\n  it('should initialize normal tracer when only service name given', done => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._sampler).to.be.an.instanceof(RemoteSampler);\n    expect(tracer._reporter).to.be.an.instanceof(RemoteReporter);\n    tracer.close(done);\n  });\n\n  it('should initialize proper samplers', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 1, expectedType: ConstSampler, expectedParam: 1 },\n      { type: 'ratelimiting', param: 2, expectedType: RateLimitingSampler, expectedParam: 2 },\n      { type: 'probabilistic', param: 0.5, expectedType: ProbabilisticSampler, expectedParam: 0.5 },\n      { type: 'remote', param: 1, expectedType: RemoteSampler, expectedParam: 1 },\n    ];\n\n    _.each(options, samplerConfig => {\n      let expectedType = samplerConfig.expectedType;\n      let expectedParam = samplerConfig.expectedParam;\n      delete samplerConfig.expectedType;\n      delete samplerConfig.expectedParam;\n\n      config.sampler = samplerConfig;\n      let tracer = initTracer(config);\n\n      expect(tracer._sampler).to.be.an.instanceof(expectedType);\n      tracer.close();\n      // TODO(oibe:head) test utils for expectedParam here?\n    });\n  });\n\n  it('should throw error on sampler incorrect type', () => {\n    let config = {\n      serviceName: 'test-service',\n    };\n    let options = [\n      { type: 'const', param: 'bad-value' },\n      { type: 'ratelimiting', param: 'bad-value' },\n      { type: 'probabilistic', param: 'bad-value' },\n      { type: 'remote', param: 'bad-value' },\n    ];\n\n    let count = 0;\n    _.each(options, samplerConfig => {\n      config.sampler = samplerConfig;\n\n      // Since its an error from a third party framework, its hard to assert on\n      // using expect.\n      try {\n        initTracer(config);\n      } catch (err) {\n        count += 1;\n      }\n    });\n\n    assert.equal(count, 4);\n  });\n\n  it('should respect reporter options', done => {\n    let config = {\n      serviceName: 'test-service',\n      sampler: {\n        type: 'const',\n        param: 0,\n      },\n      reporter: {\n        logSpans: true,\n        agentHost: '127.0.0.1',\n        agentPort: 4939,\n        flushIntervalMs: 2000,\n      },\n    };\n    let tracer = initTracer(config);\n\n    expect(tracer._reporter).to.be.an.instanceof(CompositeReporter);\n    let remoteReporter;\n    for (let i = 0; i < tracer._reporter._reporters.length; i++) {\n      let reporter = tracer._reporter._reporters[i];\n      if (reporter instanceof RemoteReporter) {\n        remoteReporter = reporter;\n        break;\n      }\n    }\n\n    assert.equal(remoteReporter._bufferFlushInterval, 2000);\n    assert.equal(remoteReporter._sender._host, '127.0.0.1');\n    assert.equal(remoteReporter._sender._port, 4939);\n    tracer.close(done);\n  });\n\n  it('should pass options to tracer', done => {\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n        tags: {\n          x: 'y',\n        },\n      }\n    );\n    assert.equal(tracer._logger, logger);\n    assert.equal(tracer._metrics._factory, metrics);\n    assert.equal(tracer._tags['x'], 'y');\n    tracer.close(done);\n  });\n\n  it('should pass options to remote sampler and reporter', done => {\n    let logger = {\n      info: function info(msg) {},\n    };\n    let metrics = {\n      createCounter: function createCounter() {\n        return {\n          increment: function() {},\n        };\n      },\n      createGauge: function createGauge() {\n        return {};\n      },\n      createTimer: function createTimer() {\n        return {};\n      },\n    };\n    let tracer = initTracer(\n      {\n        serviceName: 'test-service',\n        sampler: {\n          type: 'remote',\n          param: 0,\n        },\n      },\n      {\n        logger: logger,\n        metrics: metrics,\n      }\n    );\n    assert.equal(tracer._reporter._metrics._factory, metrics);\n    assert.equal(tracer._reporter._logger, logger);\n    assert.equal(tracer._sampler._metrics._factory, metrics);\n    assert.equal(tracer._sampler._logger, logger);\n    tracer.close(done);\n  });\n\n  it('should initialize throttler from config', () => {\n    const config = {\n      serviceName: 'test-service',\n      throttler: {\n        refreshIntervalMs: 60000,\n      },\n    };\n    const tracer = initTracer(config, { logger: logger, metrics: metrics });\n    expect(tracer._debugThrottler).to.be.an.instanceof(RemoteThrottler);\n  });\n\n  it('should delegate throttler initialization to tracer', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const tracer = initTracer(config);\n    expect(tracer._debugThrottler).to.be.an.instanceof(DefaultThrottler);\n  });\n\n  it('should use throttler passed in via options', () => {\n    const config = {\n      serviceName: 'test-service',\n    };\n    const throttler = new RemoteThrottler();\n    const tracer = initTracer(config, { throttler: throttler });\n    expect(tracer._debugThrottler).to.equal(throttler);\n    throttler.close();\n  });\n});\n"]}