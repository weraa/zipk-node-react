{"version":3,"sources":["../../../crossdock/src/helpers.js"],"names":["constants","Helpers","tracer","_tracer","channel","makeSubChannel","serviceName","peers","Utils","myIp","crossdockSpec","fs","readFileSync","path","join","__dirname","thriftChannel","source","bridge","TChannelBridge","_tracedChannel","tracedChannel","isStartRequest","traceRequest","serverSpan","setBaggageItem","BAGGAGE_KEY","baggage","sampled","setTag","opentracing","Tags","SAMPLING_PRIORITY","prepareResponse","serverRole","downstream","RSVP","Promise","resolve","reject","observedSpan","observeSpan","response","span","notImplementedError","log","json2str","callDownstream","then","downstreamResponse","transport","TRANSPORT_HTTP","callDownstreamHTTP","TRANSPORT_TCHANNEL","callDownstreamTChannel","TRANSPORT_DUMMY","port","parseInt","downstreamUrl","host","clientSpan","startSpan","childOf","context","headers","inject","FORMAT_HTTP_HEADERS","request","post","url","forever","body","JSON","stringify","err","finish","parse","DefaultContext","setSpan","timeout","cn","trace","retryFlags","never","joinTraceRequest","send","observed","traceId","traceIdStr","isSampled","getBaggageItem","process","env","NODE_ENV","args","console","apply","json"],"mappings":"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","file":"helpers.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport * as constants from './constants.js';\nimport fs from 'fs';\nimport path from 'path';\nimport dns from 'dns';\nimport DefaultContext from '../../src/default_context';\nimport opentracing from 'opentracing';\nimport request from 'request';\nimport RSVP from 'rsvp';\nimport Span from '../../src/span.js';\nimport SpanContext from '../../src/span_context.js';\nimport Tracer from '../../src/tracer.js';\nimport TChannel from 'tchannel/channel';\nimport TChannelThrift from 'tchannel/as/thrift';\nimport TChannelBridge from '../../src/tchannel_bridge';\nimport Utils from '../../src/util.js';\n\nexport default class Helpers {\n  _tracer: Tracer;\n  _bridge: TChannelBridge;\n  _tracedChannel: any;\n\n  constructor(tracer: Tracer) {\n    this._tracer = tracer;\n\n    var channel = TChannel().makeSubChannel({\n      serviceName: 'node',\n      peers: [Utils.myIp() + ':8082'],\n    });\n\n    let crossdockSpec = fs.readFileSync(\n      path.join(__dirname, '..', '..', 'src', 'jaeger-idl', 'thrift', 'crossdock', 'tracetest.thrift'),\n      'utf8'\n    );\n    let thriftChannel = TChannelThrift({\n      channel: channel,\n      source: crossdockSpec,\n    });\n\n    let bridge = new TChannelBridge(this._tracer);\n    this._tracedChannel = bridge.tracedChannel(thriftChannel);\n  }\n\n  handleRequest(isStartRequest: boolean, traceRequest: any, serverSpan: Span): void {\n    if (isStartRequest) {\n      serverSpan.setBaggageItem(constants.BAGGAGE_KEY, traceRequest.baggage);\n      if (traceRequest.sampled) {\n        serverSpan.setTag(opentracing.Tags.SAMPLING_PRIORITY, 1);\n      }\n    }\n\n    // do async call to prepareResponse\n    return this.prepareResponse(traceRequest.serverRole, traceRequest.downstream, serverSpan);\n  }\n\n  prepareResponse(serverRole: string, downstream: Downstream, serverSpan: Span): any {\n    return new RSVP.Promise((resolve, reject) => {\n      let observedSpan = this.observeSpan(serverSpan);\n      let response: TraceResponse = {\n        span: observedSpan,\n        notImplementedError: '',\n      };\n      Helpers.log(serverRole, 'observed span', Helpers.json2str(observedSpan));\n\n      if (downstream) {\n        this.callDownstream(serverRole, downstream, serverSpan).then(downstreamResponse => {\n          response.downstream = downstreamResponse;\n          Helpers.log(serverRole, 'returning response', Helpers.json2str(response));\n          resolve(response);\n        });\n      } else {\n        Helpers.log(serverRole, 'returning response', Helpers.json2str(response));\n        resolve(response);\n      }\n    });\n  }\n\n  callDownstream(serverRole: string, downstream: Downstream, serverSpan: Span): any {\n    Helpers.log(serverRole, 'calling downstream', Helpers.json2str(downstream));\n    let transport = downstream.transport;\n    if (transport === constants.TRANSPORT_HTTP) {\n      return this.callDownstreamHTTP(downstream, serverSpan);\n    } else if (transport === constants.TRANSPORT_TCHANNEL) {\n      return this.callDownstreamTChannel(downstream, serverSpan);\n    } else if (transport == constants.TRANSPORT_DUMMY) {\n      return new RSVP.Promise((resolve, reject) => {\n        resolve({ notImplementedError: 'Dummy has not been implemented' });\n      });\n    } else {\n      return new RSVP.Promise((resolve, reject) => {\n        resolve({ notImplementedError: `Unrecognized transport received: ${transport}` });\n      });\n    }\n  }\n\n  callDownstreamHTTP(downstream: Downstream, serverSpan: Span): any {\n    return new RSVP.Promise((resolve, reject) => {\n      let port = parseInt(downstream.port);\n      let downstreamUrl = `http://${downstream.host}:${port}/join_trace`;\n\n      let clientSpan = this._tracer.startSpan('client-span', { childOf: serverSpan.context() });\n      let headers = { 'Content-Type': 'application/json' };\n      this._tracer.inject(clientSpan.context(), opentracing.FORMAT_HTTP_HEADERS, headers);\n\n      request.post(\n        {\n          url: downstreamUrl,\n          forever: true,\n          headers: headers,\n          body: JSON.stringify({\n            serverRole: downstream.serverRole,\n            downstream: downstream.downstream,\n          }),\n        },\n        (err, response) => {\n          if (err) {\n            Helpers.log('error in downstream call:', err);\n            clientSpan.finish();\n            reject(err);\n            return;\n          }\n\n          clientSpan.finish();\n          let downstreamResponse = JSON.parse(response.body);\n          resolve(downstreamResponse);\n        }\n      );\n    });\n  }\n\n  callDownstreamTChannel(downstream: Downstream, serverSpan: Span): any {\n    return new RSVP.Promise((resolve, reject) => {\n      let port = parseInt(downstream.port);\n      let downstreamUrl = `http://${downstream.host}:${port}/join_trace`;\n\n      let context = new DefaultContext();\n      context.setSpan(serverSpan);\n      let request = this._tracedChannel.request({\n        timeout: 5000,\n        context: context,\n        headers: {\n          cn: 'tcollector-requestor',\n        },\n        trace: true,\n        serviceName: 'node',\n        retryFlags: { never: true },\n      });\n      let joinTraceRequest: JoinTraceRequest = {\n        serverRole: downstream.serverRole,\n      };\n\n      if (downstream.downstream) {\n        joinTraceRequest.downstream = downstream.downstream;\n      }\n\n      request.send('TracedService::joinTrace', null, { request: joinTraceRequest }, (err, response) => {\n        if (err) {\n          Helpers.log('tchannel err', err);\n          return;\n        }\n        resolve(response.body);\n      });\n    });\n  }\n\n  observeSpan(span: Span): ObservedSpan {\n    let observed: ObservedSpan = {\n      traceId: 'no span found',\n      sampled: false,\n      baggage: 'no span found',\n    };\n\n    if (span) {\n      observed = {\n        traceId: span.context().traceIdStr || '',\n        sampled: span.context().isSampled(),\n        baggage: span.getBaggageItem(constants.BAGGAGE_KEY),\n      };\n    }\n    return observed;\n  }\n\n  static log(...args: any[]): void {\n    // $FlowIgnore - stop complaining about property `env` not found\n    if (process.env.NODE_ENV !== 'test') {\n      console.log.apply(null, args);\n    }\n  }\n\n  static json2str(json: any): string {\n    return JSON.stringify(json);\n  }\n}\n"]}