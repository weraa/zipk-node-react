{"version":3,"sources":["../../../test/samplers/all_samplers.js"],"names":["constants","describe","samplers","useCallback","sampler","ConstSampler","ProbabilisticSampler","RateLimitingSampler","GuaranteedThroughputSampler","PerOperationSampler","defaultLowerBoundTracesPerSecond","defaultSamplingProbability","perOperationStrategies","RemoteSampler","forEach","o","it","description","closeCallback","sinon","spy","close","calledOnce","type","SAMPLER_TYPE_CONST","param","decision","SAMPLER_TYPE_PROBABILISTIC","SAMPLER_TYPE_RATE_LIMITING","samplerSetup","toString","expectedTags","expectedDecision","SAMPLER_TYPE_TAG_KEY","SAMPLER_PARAM_TAG_KEY","actualTags","isSampled","assert","equal","deepEqual","before","isOk","otherSampler","isNotOk","to","throw","tags"],"mappings":"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","file":"all_samplers.js","sourcesContent":["// @flow\n// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert, expect } from 'chai';\nimport sinon from 'sinon';\nimport * as constants from '../../src/constants.js';\nimport ConstSampler from '../../src/samplers/const_sampler.js';\nimport ProbabilisticSampler from '../../src/samplers/probabilistic_sampler.js';\nimport RateLimitingSampler from '../../src/samplers/ratelimiting_sampler.js';\nimport GuaranteedThroughputSampler from '../../src/samplers/guaranteed_throughput_sampler.js';\nimport PerOperationSampler from '../../src/samplers/per_operation_sampler.js';\nimport RemoteSampler from '../../src/samplers/remote_sampler.js';\nimport combinations from '../lib/combinations.js';\n\ndescribe('All samplers', () => {\n  describe('should support close()', () => {\n    let samplers = combinations({\n      useCallback: [true, false],\n      sampler: [\n        new ConstSampler(true),\n        new ConstSampler(false),\n        new ProbabilisticSampler(0.5),\n        new RateLimitingSampler(2),\n        new GuaranteedThroughputSampler(2, 0.5),\n        new PerOperationSampler(\n          {\n            defaultLowerBoundTracesPerSecond: 2,\n            defaultSamplingProbability: 0.01,\n            perOperationStrategies: [],\n          },\n          200\n        ),\n        new RemoteSampler('some-service-name'),\n      ],\n    });\n\n    samplers.forEach((o: any) => {\n      it(o.description, () => {\n        if (o.useCallback) {\n          let closeCallback = sinon.spy();\n          o.sampler.close(closeCallback);\n          assert(closeCallback.calledOnce);\n        } else {\n          o.sampler.close();\n        }\n      });\n    });\n  });\n\n  describe('should return correct tags', () => {\n    var samplers = [\n      { sampler: new ConstSampler(true), type: constants.SAMPLER_TYPE_CONST, param: true, decision: true },\n      { sampler: new ConstSampler(false), type: constants.SAMPLER_TYPE_CONST, param: false, decision: false },\n      {\n        sampler: new ProbabilisticSampler(1.0),\n        type: constants.SAMPLER_TYPE_PROBABILISTIC,\n        param: 1.0,\n        decision: true,\n      },\n      {\n        sampler: new RateLimitingSampler(0.0001, 0),\n        type: constants.SAMPLER_TYPE_RATE_LIMITING,\n        param: 0.0001,\n        decision: false,\n      },\n      {\n        sampler: new RemoteSampler('some-caller-name', { sampler: new ProbabilisticSampler(1.0) }),\n        type: constants.SAMPLER_TYPE_PROBABILISTIC,\n        param: 1.0,\n        decision: true,\n      },\n    ];\n\n    samplers.forEach((samplerSetup: any) => {\n      let sampler = samplerSetup['sampler'];\n      it(sampler.toString(), () => {\n        let expectedTags = {};\n        let expectedDecision = !!samplerSetup['decision'];\n        let description = `${sampler.toString()}, param=${samplerSetup['param']}`;\n\n        if (expectedDecision) {\n          expectedTags[constants.SAMPLER_TYPE_TAG_KEY] = samplerSetup['type'];\n          expectedTags[constants.SAMPLER_PARAM_TAG_KEY] = samplerSetup['param'];\n        }\n        let actualTags = {};\n        let decision = sampler.isSampled('operation', actualTags);\n        assert.equal(decision, expectedDecision, description);\n        assert.deepEqual(actualTags, expectedTags, description);\n      });\n    });\n  });\n});\n\ndescribe('ConstSampler', () => {\n  let sampler;\n  before(() => {\n    sampler = new ConstSampler(true);\n  });\n\n  it('decision reflects given parameter', () => {\n    assert.isOk(sampler.decision);\n  });\n\n  it('does NOT equal another type of sampler', () => {\n    let otherSampler = new ProbabilisticSampler(0.5);\n    assert.isNotOk(sampler.equal(otherSampler));\n  });\n\n  it('does equal the same type of sampler', () => {\n    let otherSampler = new ConstSampler(true);\n    assert.isOk(sampler.equal(otherSampler));\n  });\n});\n\ndescribe('ProbabilisticSampler', () => {\n  it('throws error on out of range sampling rate', () => {\n    expect(() => {\n      new ProbabilisticSampler(2.0);\n    }).to.throw('The sampling rate must be less than 0.0 and greater than 1.0. Received 2');\n  });\n\n  it('calls is Sampled, and returns false', () => {\n    let sampler = new ProbabilisticSampler(0.0);\n    let tags = {};\n    assert.isNotOk(sampler.isSampled('operation', tags));\n    assert.deepEqual(tags, {});\n  });\n\n  it('does NOT equal another type of sampler', () => {\n    let sampler = new ProbabilisticSampler(0.0);\n    let otherSampler = new ConstSampler(true);\n    assert.isNotOk(sampler.equal(otherSampler));\n  });\n});\n"]}